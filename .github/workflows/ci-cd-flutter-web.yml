name: CI/CD Flutter Web (DEV → STAGING → PROD)

on:
  push:
    branches:
      - develop
      - staging
      - master

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    env:
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}

    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Installer Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.0'  # ou la version que vous utilisez

      - name: Install dependencies Flutter
        run: flutter pub get

#      - name: Analyser le code
#        run: flutter analyze

#      - name: Exécuter les tests
#        run: flutter test --coverage

      # ─────────────────────────────────────────────────────────────────
      # Installation de Node.js (pour pouvoir installer firebase-tools)
      # ─────────────────────────────────────────────────────────────────
      - name: Installer Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'          # ou '18', selon vos besoins

      - name: Installer Firebase CLI
        run: npm install -g firebase-tools@latest
      # ─────────────────────────────────────────────────────────────────

      - name: Build & Deploy selon la branche
        run: |
          BRANCH="${GITHUB_REF##*/}"
          echo "Branche détectée: $BRANCH"

          if [ "$BRANCH" = "develop" ]; then
            echo "🚧 Build DEV"
            flutter build web --no-tree-shake-icons --dart-define=ENV=dev

            firebase deploy \
              --project dev \
              --token "$FIREBASE_TOKEN"

          elif [ "$BRANCH" = "staging" ]; then
            echo "🧪 Build STAGING"
            flutter build web --no-tree-shake-icons --dart-define=ENV=staging

            firebase deploy \
              --project staging \
              --token "$FIREBASE_TOKEN"

          elif [ "$BRANCH" = "master" ]; then
            echo "✅ Build PROD"
            flutter build web --no-tree-shake-icons --dart-define=ENV=prod

            firebase deploy \
              --project prod \
              --token "$FIREBASE_TOKEN"

          else
            echo "⏭ Branche non concernée : $BRANCH"
            exit 0
          fi
